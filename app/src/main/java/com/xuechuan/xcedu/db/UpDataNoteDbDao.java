package com.xuechuan.xcedu.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UP_DATA_NOTE_DB".
*/
public class UpDataNoteDbDao extends AbstractDao<UpDataNoteDb, Long> {

    public static final String TABLENAME = "UP_DATA_NOTE_DB";

    /**
     * Properties of entity UpDataNoteDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Isupdata = new Property(1, boolean.class, "isupdata", false, "ISUPDATA");
        public final static Property Upatanote = new Property(2, String.class, "upatanote", false, "UPATANOTE");
        public final static Property OldVersion = new Property(3, int.class, "oldVersion", false, "OLD_VERSION");
        public final static Property NewVersion = new Property(4, int.class, "newVersion", false, "NEW_VERSION");
    }


    public UpDataNoteDbDao(DaoConfig config) {
        super(config);
    }
    
    public UpDataNoteDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UP_DATA_NOTE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ISUPDATA\" INTEGER NOT NULL ," + // 1: isupdata
                "\"UPATANOTE\" TEXT," + // 2: upatanote
                "\"OLD_VERSION\" INTEGER NOT NULL ," + // 3: oldVersion
                "\"NEW_VERSION\" INTEGER NOT NULL );"); // 4: newVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UP_DATA_NOTE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UpDataNoteDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsupdata() ? 1L: 0L);
 
        String upatanote = entity.getUpatanote();
        if (upatanote != null) {
            stmt.bindString(3, upatanote);
        }
        stmt.bindLong(4, entity.getOldVersion());
        stmt.bindLong(5, entity.getNewVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UpDataNoteDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsupdata() ? 1L: 0L);
 
        String upatanote = entity.getUpatanote();
        if (upatanote != null) {
            stmt.bindString(3, upatanote);
        }
        stmt.bindLong(4, entity.getOldVersion());
        stmt.bindLong(5, entity.getNewVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UpDataNoteDb readEntity(Cursor cursor, int offset) {
        UpDataNoteDb entity = new UpDataNoteDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isupdata
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // upatanote
            cursor.getInt(offset + 3), // oldVersion
            cursor.getInt(offset + 4) // newVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UpDataNoteDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsupdata(cursor.getShort(offset + 1) != 0);
        entity.setUpatanote(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOldVersion(cursor.getInt(offset + 3));
        entity.setNewVersion(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UpDataNoteDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UpDataNoteDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UpDataNoteDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
